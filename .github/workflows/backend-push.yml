# File: push.yml
name: Push CI/CD

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:
  test_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install Dependencies
      run: |
        pip install -r backend/requirements.txt

    - name: Run Tests
      id: test
      run: |
        python backend/manage.py test

    - name: Run Collectstatic
      run: |
        python backend/manage.py collectstatic --noinput

    - name: Run Migration
      run: |
        python backend/manage.py makemigrations --noinput

    - name: Run Migrate
      run: |
        python backend/manage.py migrate --noinput

    - name: Azure ACR Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_USERNAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }} 
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      if: steps.test.outcome == 'success'
      working-directory: backend
      run: |
        docker build -t ${{ secrets.ACR_USERNAME }}.azurecr.io/tensorits-backend-image:${{ github.sha }} .
        docker push ${{ secrets.ACR_USERNAME }}.azurecr.io/tensorits-backend-image:${{ github.sha }}

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Login to Azure Container Registry
      if: steps.test.outcome == 'success'
      run: az acr login --name ${{ secrets.ACR_USERNAME }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

    - name: Azure AKS Login
      if: steps.test.outcome == 'success'
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Deploy to AKS
      if: steps.test.outcome == 'success'
      run: |
        kubectl apply -f backend/kubernetes/deployment.yaml
        kubectl apply -f backend/kubernetes/service.yaml

    - name: Log and Notify on Failure
      if: steps.test.outcome == 'failure'
      run: |
        echo "Tests failed. Notify relevant parties or log the failure details."
